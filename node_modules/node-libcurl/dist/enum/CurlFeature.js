"use strict";
/**
 * Copyright (c) Jonathan Cardoso Machado. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurlFeature = void 0;
/**
 * Flags to be used with {@link "Curl".Curl.enable | `Curl#enable`} and {@link "Curl".Curl.disable | `Curl#disable`}
 * @public
 */
var CurlFeature;
(function (CurlFeature) {
    /**
     * Data received is passed as a Buffer to the end event.
     */
    CurlFeature[CurlFeature["NoDataParsing"] = 1] = "NoDataParsing";
    /**
     * Header received is not parsed, it's passed as a Buffer to the end event.
     */
    CurlFeature[CurlFeature["NoHeaderParsing"] = 2] = "NoHeaderParsing";
    /**
     * Same than `NoDataParsing | NoHeaderParsing`
     */
    CurlFeature[CurlFeature["Raw"] = 3] = "Raw";
    /**
     * Data received is not stored inside this handle, implies `NoDataParsing`.
     */
    CurlFeature[CurlFeature["NoDataStorage"] = 4] = "NoDataStorage";
    /**
     * Header received is not stored inside this handle, implies `NoHeaderParsing`.
     */
    CurlFeature[CurlFeature["NoHeaderStorage"] = 8] = "NoHeaderStorage";
    /**
     * Same than `NoDataStorage | NoHeaderStorage`, implies `Raw`.
     */
    CurlFeature[CurlFeature["NoStorage"] = 12] = "NoStorage";
})(CurlFeature = exports.CurlFeature || (exports.CurlFeature = {}));
//# sourceMappingURL=CurlFeature.js.map